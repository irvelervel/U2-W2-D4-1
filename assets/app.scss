// in un file SCSS voi potete scrivere anche CSS normalissimo
h1 {
  color: red;
}

// ...ma potete fare anche molto di più!
// 1) SELETTORI ANNIDATI/NIFIDICATI

// nav {
//   display: inline;
// }

// nav ul {
//   display: flex;
//   flex-direction: column;
// }

nav {
  display: inline;
  ul {
    // questo selettore è uguale a nav ul
    // seleziona tutte le ul dentro i nav
    display: flex;
    flex-direction: column;
    li {
      margin-left: 5px;
      margin-right: 5px;
      a {
        // normalmente sarebbe nav ul li a { }
        text-decoration: none;
        // &:hover {
        // come se fosse nav ul li a:hover
        // }
      }
    }
  }
}

// 2) PSEUDOCLASSI
// img {
//   width: 300px;
//   height: 300px;
// }

// img:hover {
//   transform: scale(1.1);
// }

img {
  width: 300px;
  height: 300px;
  &:hover {
    // & è come se fosse un "this"
    transform: scale(1.1);
  }
}

// 3) PROPRIETÀ CON PREFISSI COMUNI
// p {
//   font-size: 1.2em;
//   font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
//     'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
//   font-weight: bold;
// }

p {
  font: {
    size: 1.3em;
    family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
      'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    weight: bold;
  }
}

// 4) VARIABILI
// le variabili anche in SASS servono per "memorizzare" dei valori.
// valori che spesso è necessario riutilizzare in diverse regole di stili
// si chiamano "variabili" anche se una volta dichiarate non si cambiano quasi mai, sono più simili al concetto di costante

// quali sono i tipi di dato che possiamo salvare in sass?
// - numeri (1, 50, 10px, 2em)
// - stringhe ('hello')
// - colori (red, blue, #ffccaa)
// - boolean (true/false)
// - null
// - valore multiplo (5px 5px 10px) // per una proprietà margin, padding
// - lista di valori (10px, 25px, 50px) // un po' come un array
// - mappe di coppie chiave/valore // un po' come un oggetto

// come si dichiara una variabile?
$my-margin: 30px;

div {
  margin-top: $my-margin;
}

p {
  margin-bottom: $my-margin;
}

// 5) MIXINS
// Un mixin è un BLOCCO di regole di stile richiamabile con un selettore

@mixin basicButton {
  color: lightblue;
  font-size: 2em;
  margin-top: $my-margin; // 30px
}

// questo è un selettore piuttosto specifico per un bottone con id "my-button"
button#my-button {
  @include basicButton;
  //   color: lightblue;
  //   font-size: 2em;
  //   margin-top: $my-margin; // 30px
  background-color: orange;
}

// variation: MIXIN DINAMICI (PARAMETRICO)
// @mixin customColor {
//   color: orange;
//   border-bottom: orange;
// }

// @mixin customColor2 {
//   color: blue;
//   border-bottom: blue;
// }

@mixin genericCustomColor($color) {
  color: $color;
  border-bottom: $color;
}

// tutti i div con class="par"
div.par {
  @include genericCustomColor(green);
  //   color: green;
  //   border-bottom: green;
}

// 6) INTERPOLAZIONE
@mixin interpolation($property, $value) {
  font-#{$property}: $value;
}

.element1 {
  @include interpolation('size', 16px);
  //   font-size: 16px;
}

.element2 {
  @include interpolation('family', 'Lucida sans');
}

// 7) CICLI
$sizes: 10px, 25px, 50px;

@each $element in $sizes {
  // per ogni elemento di sizes
  .image-#{$element} {
    // ho generato 3 classi di nome: .image-10px, .image-25px, .image-50px
    width: $element;
    height: $element;
  }
}

// .image-10px {
//   width: 10px;
//   height: 10px;
// }

// .image-25px {
//   width: 25px;
//   height: 25px;
// }

// .image-50px {
//   width: 50px;
//   height: 50px;
// }

$font-weights: (
  'regular': 400,
  'medium': 500,
  'bold': 700,
);

@each $key, $value in $font-weights {
  // key è la chiave, value è il valore
  .padding-#{$key} {
    padding: $value;
  }
}

// oppure...
// @each $paperino, $pluto in $font-weights {
//   // paperino è la chiave, pluto è il valore
//   .padding-#{$paperino} {
//     padding: $pluto;
//   }
// }
// utile quando vi serve indicare un valore con un nome diverso
